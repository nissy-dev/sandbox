admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

# Downstream: Envoy に接続する側
# Upstream: Envoy が接続する先
static_resources:
  # DownstreamがEnvoyに接続するための情報を定義
  listeners:
    - name: listener_0
      address:
        # ingress の情報 (0.0.0.0は、すべてのIPアドレスからリクエストを受け取るという意味)
        socket_address: { address: 0.0.0.0, port_value: 9000 }
      filter_chains:
        # 受け取ったパケットをどう処理するかを決めるフィルター
        - filters:
            # https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                # http connection manager の統計情報を出力するときに利用するprefix (わかりやすい名前をつければ良い)
                stat_prefix: ingress_http
                # ルーティングの定義
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains: ["*"] # すべてのドメイン
                      routes:
                        - match: { prefix: "/" } # リクエストのルートに一致する
                          route:
                            cluster: greeter_service # ルーティング先のクラスター
                            timeout: 0s # リクエストのタイムアウトを無効化 (なんで無効化しているんだろう...?)
                            max_stream_duration:
                              grpc_timeout_header_max: 0s
                      # CORSに関連する設定
                      cors:
                        allow_origin_string_match:
                          - prefix: "*" # ここは厳しくする必要ありそう
                        allow_methods: GET, PUT, DELETE, POST, OPTIONS
                        allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                        max_age: "1728000"
                        expose_headers: custom-header-1,grpc-status,grpc-message
                # 利用するフィルターの定義
                # その他のフィルター: https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/http_filters
                http_filters:
                  - name: envoy.filters.http.grpc_web
                  - name: envoy.filters.http.cors
                  - name: envoy.filters.http.router
  # EnvoyがUpstreamに接続するホストの定義
  clusters:
    - name: greeter_service
      connect_timeout: 0.25s
      # 各クラスターの名前解決の方法の設定...?
      # なんでstrict dnsじゃないんだろう...?
      type: logical_dns
      http2_protocol_options: {}
      # ロードバランサーの種類
      # ラウンドロビン = 際限のあるリソースを順繰りに割り振ってゆく方式
      lb_policy: round_robin
      dns_lookup_family: V4_ONLY
      # ルーティング先のエンドポイントの設定
      load_assignment:
        cluster_name: cluster_0
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: host.docker.internal
                      port_value: 13333 # server port
